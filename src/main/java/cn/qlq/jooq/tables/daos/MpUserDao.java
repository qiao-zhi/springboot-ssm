/*
 * This file is generated by jOOQ.
 */
package cn.qlq.jooq.tables.daos;


import cn.qlq.jooq.tables.MP_USER;
import cn.qlq.jooq.tables.pojos.MpUser;
import cn.qlq.jooq.tables.records.MpUserRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MpUserDao extends DAOImpl<MpUserRecord, MpUser, Long> {

    /**
     * Create a new MpUserDao without any configuration
     */
    public MpUserDao() {
        super(MP_USER.MP_USER, MpUser.class);
    }

    /**
     * Create a new MpUserDao with an attached configuration
     */
    public MpUserDao(Configuration configuration) {
        super(MP_USER.MP_USER, MpUser.class, configuration);
    }

    @Override
    public Long getId(MpUser object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<MpUser> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(MP_USER.MP_USER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<MpUser> fetchById(Long... values) {
        return fetch(MP_USER.MP_USER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public MpUser fetchOneById(Long value) {
        return fetchOne(MP_USER.MP_USER.ID, value);
    }

    /**
     * Fetch records that have <code>age BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<MpUser> fetchRangeOfAge(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(MP_USER.MP_USER.AGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>age IN (values)</code>
     */
    public List<MpUser> fetchByAge(Integer... values) {
        return fetch(MP_USER.MP_USER.AGE, values);
    }

    /**
     * Fetch records that have <code>deleted BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<MpUser> fetchRangeOfDeleted(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(MP_USER.MP_USER.DELETED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>deleted IN (values)</code>
     */
    public List<MpUser> fetchByDeleted(Integer... values) {
        return fetch(MP_USER.MP_USER.DELETED, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<MpUser> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(MP_USER.MP_USER.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<MpUser> fetchByEmail(String... values) {
        return fetch(MP_USER.MP_USER.EMAIL, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<MpUser> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(MP_USER.MP_USER.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<MpUser> fetchByName(String... values) {
        return fetch(MP_USER.MP_USER.NAME, values);
    }

    /**
     * Fetch records that have <code>unique_code BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<MpUser> fetchRangeOfUniqueCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(MP_USER.MP_USER.UNIQUE_CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>unique_code IN (values)</code>
     */
    public List<MpUser> fetchByUniqueCode(String... values) {
        return fetch(MP_USER.MP_USER.UNIQUE_CODE, values);
    }
}
