/*
 * This file is generated by jOOQ.
 */
package cn.qlq.jooq.tables.daos;


import cn.qlq.jooq.tables.USER2;
import cn.qlq.jooq.tables.pojos.User2;
import cn.qlq.jooq.tables.records.User2Record;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class User2Dao extends DAOImpl<User2Record, User2, Integer> {

    /**
     * Create a new User2Dao without any configuration
     */
    public User2Dao() {
        super(USER2.USER2, User2.class);
    }

    /**
     * Create a new User2Dao with an attached configuration
     */
    public User2Dao(Configuration configuration) {
        super(USER2.USER2, User2.class, configuration);
    }

    @Override
    public Integer getId(User2 object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User2> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(USER2.USER2.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<User2> fetchById(Integer... values) {
        return fetch(USER2.USER2.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public User2 fetchOneById(Integer value) {
        return fetchOne(USER2.USER2.ID, value);
    }

    /**
     * Fetch records that have <code>address BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User2> fetchRangeOfAddress(String lowerInclusive, String upperInclusive) {
        return fetchRange(USER2.USER2.ADDRESS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>address IN (values)</code>
     */
    public List<User2> fetchByAddress(String... values) {
        return fetch(USER2.USER2.ADDRESS, values);
    }

    /**
     * Fetch records that have <code>createtime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User2> fetchRangeOfCreatetime(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(USER2.USER2.CREATETIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>createtime IN (values)</code>
     */
    public List<User2> fetchByCreatetime(Timestamp... values) {
        return fetch(USER2.USER2.CREATETIME, values);
    }

    /**
     * Fetch records that have <code>isdeleted BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User2> fetchRangeOfIsdeleted(String lowerInclusive, String upperInclusive) {
        return fetchRange(USER2.USER2.ISDELETED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>isdeleted IN (values)</code>
     */
    public List<User2> fetchByIsdeleted(String... values) {
        return fetch(USER2.USER2.ISDELETED, values);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User2> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(USER2.USER2.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<User2> fetchByPassword(String... values) {
        return fetch(USER2.USER2.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>sex BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User2> fetchRangeOfSex(String lowerInclusive, String upperInclusive) {
        return fetchRange(USER2.USER2.SEX, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sex IN (values)</code>
     */
    public List<User2> fetchBySex(String... values) {
        return fetch(USER2.USER2.SEX, values);
    }

    /**
     * Fetch records that have <code>userfullname BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User2> fetchRangeOfUserfullname(String lowerInclusive, String upperInclusive) {
        return fetchRange(USER2.USER2.USERFULLNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>userfullname IN (values)</code>
     */
    public List<User2> fetchByUserfullname(String... values) {
        return fetch(USER2.USER2.USERFULLNAME, values);
    }

    /**
     * Fetch records that have <code>username BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User2> fetchRangeOfUsername(String lowerInclusive, String upperInclusive) {
        return fetchRange(USER2.USER2.USERNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>username IN (values)</code>
     */
    public List<User2> fetchByUsername(String... values) {
        return fetch(USER2.USER2.USERNAME, values);
    }

    /**
     * Fetch records that have <code>country_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User2> fetchRangeOfCountryId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(USER2.USER2.COUNTRY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>country_id IN (values)</code>
     */
    public List<User2> fetchByCountryId(Integer... values) {
        return fetch(USER2.USER2.COUNTRY_ID, values);
    }
}
