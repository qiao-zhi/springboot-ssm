/*
 * This file is generated by jOOQ.
 */
package cn.qlq.jooq.tables.daos;


import cn.qlq.jooq.tables.USER;
import cn.qlq.jooq.tables.pojos.User;
import cn.qlq.jooq.tables.records.UserRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.stereotype.Repository;

import javax.annotation.Generated;
import java.sql.Date;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.4"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
@Repository("userDao2")
public class UserDao extends DAOImpl<UserRecord, User, Integer> {

    /**
     * Create a new UserDao without any configuration
     */
    public UserDao() {
        super(USER.USER, User.class);
    }

    /**
     * Create a new UserDao with an attached configuration
     */
    public UserDao(Configuration configuration) {
        super(USER.USER, User.class, configuration);
    }

    @Override
    public Integer getId(User object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(USER.USER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<User> fetchById(Integer... values) {
        return fetch(USER.USER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public User fetchOneById(Integer value) {
        return fetchOne(USER.USER.ID, value);
    }

    /**
     * Fetch records that have <code>username BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User> fetchRangeOfUsername(String lowerInclusive, String upperInclusive) {
        return fetchRange(USER.USER.USERNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>username IN (values)</code>
     */
    public List<User> fetchByUsername(String... values) {
        return fetch(USER.USER.USERNAME, values);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(USER.USER.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<User> fetchByPassword(String... values) {
        return fetch(USER.USER.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>userfullname BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User> fetchRangeOfUserfullname(String lowerInclusive, String upperInclusive) {
        return fetchRange(USER.USER.USERFULLNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>userfullname IN (values)</code>
     */
    public List<User> fetchByUserfullname(String... values) {
        return fetch(USER.USER.USERFULLNAME, values);
    }

    /**
     * Fetch records that have <code>createtime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User> fetchRangeOfCreatetime(Date lowerInclusive, Date upperInclusive) {
        return fetchRange(USER.USER.CREATETIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>createtime IN (values)</code>
     */
    public List<User> fetchByCreatetime(Date... values) {
        return fetch(USER.USER.CREATETIME, values);
    }

    /**
     * Fetch records that have <code>isdeleted BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User> fetchRangeOfIsdeleted(String lowerInclusive, String upperInclusive) {
        return fetchRange(USER.USER.ISDELETED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>isdeleted IN (values)</code>
     */
    public List<User> fetchByIsdeleted(String... values) {
        return fetch(USER.USER.ISDELETED, values);
    }

    /**
     * Fetch records that have <code>sex BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User> fetchRangeOfSex(String lowerInclusive, String upperInclusive) {
        return fetchRange(USER.USER.SEX, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sex IN (values)</code>
     */
    public List<User> fetchBySex(String... values) {
        return fetch(USER.USER.SEX, values);
    }

    /**
     * Fetch records that have <code>address BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User> fetchRangeOfAddress(String lowerInclusive, String upperInclusive) {
        return fetchRange(USER.USER.ADDRESS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>address IN (values)</code>
     */
    public List<User> fetchByAddress(String... values) {
        return fetch(USER.USER.ADDRESS, values);
    }

    /**
     * Fetch records that have <code>roles BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User> fetchRangeOfRoles(String lowerInclusive, String upperInclusive) {
        return fetchRange(USER.USER.ROLES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>roles IN (values)</code>
     */
    public List<User> fetchByRoles(String... values) {
        return fetch(USER.USER.ROLES, values);
    }

    /**
     * Fetch records that have <code>userblank BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User> fetchRangeOfUserblank(String lowerInclusive, String upperInclusive) {
        return fetchRange(USER.USER.USERBLANK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>userblank IN (values)</code>
     */
    public List<User> fetchByUserblank(String... values) {
        return fetch(USER.USER.USERBLANK, values);
    }
}
