/*
 * This file is generated by jOOQ.
 */
package cn.qlq.jooq.tables.daos;


import cn.qlq.jooq.tables.USER_COUNTRY;
import cn.qlq.jooq.tables.pojos.UserCountry;
import cn.qlq.jooq.tables.records.UserCountryRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class UserCountryDao extends DAOImpl<UserCountryRecord, UserCountry, Record2<Integer, Integer>> {

    /**
     * Create a new UserCountryDao without any configuration
     */
    public UserCountryDao() {
        super(USER_COUNTRY.USER_COUNTRY, UserCountry.class);
    }

    /**
     * Create a new UserCountryDao with an attached configuration
     */
    public UserCountryDao(Configuration configuration) {
        super(USER_COUNTRY.USER_COUNTRY, UserCountry.class, configuration);
    }

    @Override
    public Record2<Integer, Integer> getId(UserCountry object) {
        return compositeKeyRecord(object.getUserid(), object.getCountryid());
    }

    /**
     * Fetch records that have <code>userId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserCountry> fetchRangeOfUserid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(USER_COUNTRY.USER_COUNTRY.USERID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>userId IN (values)</code>
     */
    public List<UserCountry> fetchByUserid(Integer... values) {
        return fetch(USER_COUNTRY.USER_COUNTRY.USERID, values);
    }

    /**
     * Fetch records that have <code>countryId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserCountry> fetchRangeOfCountryid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(USER_COUNTRY.USER_COUNTRY.COUNTRYID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>countryId IN (values)</code>
     */
    public List<UserCountry> fetchByCountryid(Integer... values) {
        return fetch(USER_COUNTRY.USER_COUNTRY.COUNTRYID, values);
    }
}
