/*
 * This file is generated by jOOQ.
 */
package cn.qlq.jooq.tables.daos;


import cn.qlq.jooq.tables.USERCOUNTRY;
import cn.qlq.jooq.tables.pojos.Usercountry;
import cn.qlq.jooq.tables.records.UsercountryRecord;
import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;
import org.springframework.stereotype.Repository;

import javax.annotation.Generated;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class UsercountryDao extends DAOImpl<UsercountryRecord, Usercountry, Record2<Integer, Integer>> {

    /**
     * Create a new UsercountryDao without any configuration
     */
    public UsercountryDao() {
        super(USERCOUNTRY.USERCOUNTRY, Usercountry.class);
    }

    /**
     * Create a new UsercountryDao with an attached configuration
     */
    public UsercountryDao(Configuration configuration) {
        super(USERCOUNTRY.USERCOUNTRY, Usercountry.class, configuration);
    }

    @Override
    public Record2<Integer, Integer> getId(Usercountry object) {
        return compositeKeyRecord(object.getUserid(), object.getCountryid());
    }

    /**
     * Fetch records that have <code>userid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<Usercountry> fetchRangeOfUserid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(USERCOUNTRY.USERCOUNTRY.USERID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>userid IN (values)</code>
     */
    public List<Usercountry> fetchByUserid(Integer... values) {
        return fetch(USERCOUNTRY.USERCOUNTRY.USERID, values);
    }

    /**
     * Fetch records that have <code>countryid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<Usercountry> fetchRangeOfCountryid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(USERCOUNTRY.USERCOUNTRY.COUNTRYID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>countryid IN (values)</code>
     */
    public List<Usercountry> fetchByCountryid(Integer... values) {
        return fetch(USERCOUNTRY.USERCOUNTRY.COUNTRYID, values);
    }
}
