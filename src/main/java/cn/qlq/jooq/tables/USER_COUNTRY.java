/*
 * This file is generated by jOOQ.
 */
package cn.qlq.jooq.tables;


import cn.qlq.jooq.Indexes;
import cn.qlq.jooq.Keys;
import cn.qlq.jooq.Test1;
import cn.qlq.jooq.tables.records.UserCountryRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class USER_COUNTRY extends TableImpl<UserCountryRecord> {

    private static final long serialVersionUID = -1236226683;

    /**
     * The reference instance of <code>test1.user_country</code>
     */
    public static final USER_COUNTRY USER_COUNTRY = new USER_COUNTRY();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserCountryRecord> getRecordType() {
        return UserCountryRecord.class;
    }

    /**
     * The column <code>test1.user_country.userId</code>.
     */
    public final TableField<UserCountryRecord, Integer> USERID = createField(DSL.name("userId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>test1.user_country.countryId</code>.
     */
    public final TableField<UserCountryRecord, Integer> COUNTRYID = createField(DSL.name("countryId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>test1.user_country</code> table reference
     */
    public USER_COUNTRY() {
        this(DSL.name("user_country"), null);
    }

    /**
     * Create an aliased <code>test1.user_country</code> table reference
     */
    public USER_COUNTRY(String alias) {
        this(DSL.name(alias), USER_COUNTRY);
    }

    /**
     * Create an aliased <code>test1.user_country</code> table reference
     */
    public USER_COUNTRY(Name alias) {
        this(alias, USER_COUNTRY);
    }

    private USER_COUNTRY(Name alias, Table<UserCountryRecord> aliased) {
        this(alias, aliased, null);
    }

    private USER_COUNTRY(Name alias, Table<UserCountryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> USER_COUNTRY(Table<O> child, ForeignKey<O, UserCountryRecord> key) {
        super(child, key, USER_COUNTRY);
    }

    @Override
    public Schema getSchema() {
        return Test1.TEST1;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_COUNTRY_PRIMARY);
    }

    @Override
    public UniqueKey<UserCountryRecord> getPrimaryKey() {
        return Keys.KEY_USER_COUNTRY_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserCountryRecord>> getKeys() {
        return Arrays.<UniqueKey<UserCountryRecord>>asList(Keys.KEY_USER_COUNTRY_PRIMARY);
    }

    @Override
    public USER_COUNTRY as(String alias) {
        return new USER_COUNTRY(DSL.name(alias), this);
    }

    @Override
    public USER_COUNTRY as(Name alias) {
        return new USER_COUNTRY(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public USER_COUNTRY rename(String name) {
        return new USER_COUNTRY(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public USER_COUNTRY rename(Name name) {
        return new USER_COUNTRY(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
