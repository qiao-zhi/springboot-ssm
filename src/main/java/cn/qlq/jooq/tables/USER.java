/*
 * This file is generated by jOOQ.
 */
package cn.qlq.jooq.tables;


import cn.qlq.jooq.Indexes;
import cn.qlq.jooq.Keys;
import cn.qlq.jooq.Test1;
import cn.qlq.jooq.tables.records.UserRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Date;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class USER extends TableImpl<UserRecord> {

    private static final long serialVersionUID = -1543756583;

    /**
     * The reference instance of <code>test1.user</code>
     */
    public static final cn.qlq.jooq.tables.USER USER = new USER();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRecord> getRecordType() {
        return UserRecord.class;
    }

    /**
     * The column <code>test1.user.id</code>.
     */
    public final TableField<UserRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>test1.user.username</code>.
     */
    public final TableField<UserRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>test1.user.password</code>.
     */
    public final TableField<UserRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(40), this, "");

    /**
     * The column <code>test1.user.userfullname</code>.
     */
    public final TableField<UserRecord, String> USERFULLNAME = createField(DSL.name("userfullname"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>test1.user.createtime</code>.
     */
    public final TableField<UserRecord, Date> CREATETIME = createField(DSL.name("createtime"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>test1.user.isdeleted</code>.
     */
    public final TableField<UserRecord, String> ISDELETED = createField(DSL.name("isdeleted"), org.jooq.impl.SQLDataType.VARCHAR(2), this, "");

    /**
     * The column <code>test1.user.sex</code>.
     */
    public final TableField<UserRecord, String> SEX = createField(DSL.name("sex"), org.jooq.impl.SQLDataType.VARCHAR(2), this, "");

    /**
     * The column <code>test1.user.address</code>.
     */
    public final TableField<UserRecord, String> ADDRESS = createField(DSL.name("address"), org.jooq.impl.SQLDataType.VARCHAR(40), this, "");

    /**
     * The column <code>test1.user.roles</code>.
     */
    public final TableField<UserRecord, String> ROLES = createField(DSL.name("roles"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>test1.user.userblank</code>.
     */
    public final TableField<UserRecord, String> USERBLANK = createField(DSL.name("userblank"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>test1.user</code> table reference
     */
    public USER() {
        this(DSL.name("user"), null);
    }

    /**
     * Create an aliased <code>test1.user</code> table reference
     */
    public USER(String alias) {
        this(DSL.name(alias), USER);
    }

    /**
     * Create an aliased <code>test1.user</code> table reference
     */
    public USER(Name alias) {
        this(alias, USER);
    }

    private USER(Name alias, Table<UserRecord> aliased) {
        this(alias, aliased, null);
    }

    private USER(Name alias, Table<UserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> USER(Table<O> child, ForeignKey<O, UserRecord> key) {
        super(child, key, USER);
    }

    @Override
    public Schema getSchema() {
        return Test1.TEST1;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_PRIMARY);
    }

    @Override
    public Identity<UserRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER;
    }

    @Override
    public UniqueKey<UserRecord> getPrimaryKey() {
        return Keys.KEY_USER_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserRecord>> getKeys() {
        return Arrays.<UniqueKey<UserRecord>>asList(Keys.KEY_USER_PRIMARY);
    }

    @Override
    public cn.qlq.jooq.tables.USER as(String alias) {
        return new USER(DSL.name(alias), this);
    }

    @Override
    public cn.qlq.jooq.tables.USER as(Name alias) {
        return new USER(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public cn.qlq.jooq.tables.USER rename(String name) {
        return new USER(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public cn.qlq.jooq.tables.USER rename(Name name) {
        return new USER(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, String, Date, String, String, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
