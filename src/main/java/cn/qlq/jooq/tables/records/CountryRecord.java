/*
 * This file is generated by jOOQ.
 */
package cn.qlq.jooq.tables.records;


import cn.qlq.jooq.tables.COUNTRY;
import cn.qlq.jooq.tables.interfaces.ICountry;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CountryRecord extends UpdatableRecordImpl<CountryRecord> implements Record2<Integer, String>, ICountry {

    private static final long serialVersionUID = -578763588;

    /**
     * Setter for <code>test1.country.id</code>.
     */
    @Override
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>test1.country.id</code>.
     */
    @Override
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>test1.country.countryname</code>.
     */
    @Override
    public void setCountryname(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>test1.country.countryname</code>.
     */
    @Override
    public String getCountryname() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return COUNTRY.COUNTRY.ID;
    }

    @Override
    public Field<String> field2() {
        return COUNTRY.COUNTRY.COUNTRYNAME;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getCountryname();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getCountryname();
    }

    @Override
    public CountryRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public CountryRecord value2(String value) {
        setCountryname(value);
        return this;
    }

    @Override
    public CountryRecord values(Integer value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ICountry from) {
        setId(from.getId());
        setCountryname(from.getCountryname());
    }

    @Override
    public <E extends ICountry> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CountryRecord
     */
    public CountryRecord() {
        super(COUNTRY.COUNTRY);
    }

    /**
     * Create a detached, initialised CountryRecord
     */
    public CountryRecord(Integer id, String countryname) {
        super(COUNTRY.COUNTRY);

        set(0, id);
        set(1, countryname);
    }
}
