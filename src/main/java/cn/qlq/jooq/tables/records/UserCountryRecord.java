/*
 * This file is generated by jOOQ.
 */
package cn.qlq.jooq.tables.records;


import cn.qlq.jooq.tables.USER_COUNTRY;
import cn.qlq.jooq.tables.interfaces.IUserCountry;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserCountryRecord extends UpdatableRecordImpl<UserCountryRecord> implements Record2<Integer, Integer>, IUserCountry {

    private static final long serialVersionUID = -1071721694;

    /**
     * Setter for <code>test1.user_country.userId</code>.
     */
    @Override
    public void setUserid(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>test1.user_country.userId</code>.
     */
    @Override
    public Integer getUserid() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>test1.user_country.countryId</code>.
     */
    @Override
    public void setCountryid(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>test1.user_country.countryId</code>.
     */
    @Override
    public Integer getCountryid() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return USER_COUNTRY.USER_COUNTRY.USERID;
    }

    @Override
    public Field<Integer> field2() {
        return USER_COUNTRY.USER_COUNTRY.COUNTRYID;
    }

    @Override
    public Integer component1() {
        return getUserid();
    }

    @Override
    public Integer component2() {
        return getCountryid();
    }

    @Override
    public Integer value1() {
        return getUserid();
    }

    @Override
    public Integer value2() {
        return getCountryid();
    }

    @Override
    public UserCountryRecord value1(Integer value) {
        setUserid(value);
        return this;
    }

    @Override
    public UserCountryRecord value2(Integer value) {
        setCountryid(value);
        return this;
    }

    @Override
    public UserCountryRecord values(Integer value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IUserCountry from) {
        setUserid(from.getUserid());
        setCountryid(from.getCountryid());
    }

    @Override
    public <E extends IUserCountry> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserCountryRecord
     */
    public UserCountryRecord() {
        super(USER_COUNTRY.USER_COUNTRY);
    }

    /**
     * Create a detached, initialised UserCountryRecord
     */
    public UserCountryRecord(Integer userid, Integer countryid) {
        super(USER_COUNTRY.USER_COUNTRY);

        set(0, userid);
        set(1, countryid);
    }
}
