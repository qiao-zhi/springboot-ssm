/*
 * This file is generated by jOOQ.
 */
package cn.qlq.jooq.tables;


import cn.qlq.jooq.Indexes;
import cn.qlq.jooq.Keys;
import cn.qlq.jooq.Test1;
import cn.qlq.jooq.tables.records.UsercountryRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class USERCOUNTRY extends TableImpl<UsercountryRecord> {

    private static final long serialVersionUID = 420100022;

    /**
     * The reference instance of <code>test1.usercountry</code>
     */
    public static final cn.qlq.jooq.tables.USERCOUNTRY USERCOUNTRY = new USERCOUNTRY();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsercountryRecord> getRecordType() {
        return UsercountryRecord.class;
    }

    /**
     * The column <code>test1.usercountry.userid</code>.
     */
    public final TableField<UsercountryRecord, Integer> USERID = createField(DSL.name("userid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>test1.usercountry.countryid</code>.
     */
    public final TableField<UsercountryRecord, Integer> COUNTRYID = createField(DSL.name("countryid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>test1.usercountry</code> table reference
     */
    public USERCOUNTRY() {
        this(DSL.name("usercountry"), null);
    }

    /**
     * Create an aliased <code>test1.usercountry</code> table reference
     */
    public USERCOUNTRY(String alias) {
        this(DSL.name(alias), USERCOUNTRY);
    }

    /**
     * Create an aliased <code>test1.usercountry</code> table reference
     */
    public USERCOUNTRY(Name alias) {
        this(alias, USERCOUNTRY);
    }

    private USERCOUNTRY(Name alias, Table<UsercountryRecord> aliased) {
        this(alias, aliased, null);
    }

    private USERCOUNTRY(Name alias, Table<UsercountryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> USERCOUNTRY(Table<O> child, ForeignKey<O, UsercountryRecord> key) {
        super(child, key, USERCOUNTRY);
    }

    @Override
    public Schema getSchema() {
        return Test1.TEST1;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USERCOUNTRY_PRIMARY);
    }

    @Override
    public UniqueKey<UsercountryRecord> getPrimaryKey() {
        return Keys.KEY_USERCOUNTRY_PRIMARY;
    }

    @Override
    public List<UniqueKey<UsercountryRecord>> getKeys() {
        return Arrays.<UniqueKey<UsercountryRecord>>asList(Keys.KEY_USERCOUNTRY_PRIMARY);
    }

    @Override
    public cn.qlq.jooq.tables.USERCOUNTRY as(String alias) {
        return new USERCOUNTRY(DSL.name(alias), this);
    }

    @Override
    public cn.qlq.jooq.tables.USERCOUNTRY as(Name alias) {
        return new USERCOUNTRY(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public cn.qlq.jooq.tables.USERCOUNTRY rename(String name) {
        return new USERCOUNTRY(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public cn.qlq.jooq.tables.USERCOUNTRY rename(Name name) {
        return new USERCOUNTRY(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
