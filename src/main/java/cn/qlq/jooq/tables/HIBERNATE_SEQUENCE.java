/*
 * This file is generated by jOOQ.
 */
package cn.qlq.jooq.tables;


import cn.qlq.jooq.Test1;
import cn.qlq.jooq.tables.records.HibernateSequenceRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HIBERNATE_SEQUENCE extends TableImpl<HibernateSequenceRecord> {

    private static final long serialVersionUID = 831332154;

    /**
     * The reference instance of <code>test1.hibernate_sequence</code>
     */
    public static final HIBERNATE_SEQUENCE HIBERNATE_SEQUENCE = new HIBERNATE_SEQUENCE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HibernateSequenceRecord> getRecordType() {
        return HibernateSequenceRecord.class;
    }

    /**
     * The column <code>test1.hibernate_sequence.next_val</code>.
     */
    public final TableField<HibernateSequenceRecord, Long> NEXT_VAL = createField(DSL.name("next_val"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>test1.hibernate_sequence</code> table reference
     */
    public HIBERNATE_SEQUENCE() {
        this(DSL.name("hibernate_sequence"), null);
    }

    /**
     * Create an aliased <code>test1.hibernate_sequence</code> table reference
     */
    public HIBERNATE_SEQUENCE(String alias) {
        this(DSL.name(alias), HIBERNATE_SEQUENCE);
    }

    /**
     * Create an aliased <code>test1.hibernate_sequence</code> table reference
     */
    public HIBERNATE_SEQUENCE(Name alias) {
        this(alias, HIBERNATE_SEQUENCE);
    }

    private HIBERNATE_SEQUENCE(Name alias, Table<HibernateSequenceRecord> aliased) {
        this(alias, aliased, null);
    }

    private HIBERNATE_SEQUENCE(Name alias, Table<HibernateSequenceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> HIBERNATE_SEQUENCE(Table<O> child, ForeignKey<O, HibernateSequenceRecord> key) {
        super(child, key, HIBERNATE_SEQUENCE);
    }

    @Override
    public Schema getSchema() {
        return Test1.TEST1;
    }

    @Override
    public HIBERNATE_SEQUENCE as(String alias) {
        return new HIBERNATE_SEQUENCE(DSL.name(alias), this);
    }

    @Override
    public HIBERNATE_SEQUENCE as(Name alias) {
        return new HIBERNATE_SEQUENCE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HIBERNATE_SEQUENCE rename(String name) {
        return new HIBERNATE_SEQUENCE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HIBERNATE_SEQUENCE rename(Name name) {
        return new HIBERNATE_SEQUENCE(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Long> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
