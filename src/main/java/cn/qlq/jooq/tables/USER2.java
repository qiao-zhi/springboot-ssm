/*
 * This file is generated by jOOQ.
 */
package cn.qlq.jooq.tables;


import cn.qlq.jooq.Indexes;
import cn.qlq.jooq.Keys;
import cn.qlq.jooq.Test1;
import cn.qlq.jooq.tables.records.User2Record;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class USER2 extends TableImpl<User2Record> {

    private static final long serialVersionUID = -1016689552;

    /**
     * The reference instance of <code>test1.user2</code>
     */
    public static final USER2 USER2 = new USER2();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<User2Record> getRecordType() {
        return User2Record.class;
    }

    /**
     * The column <code>test1.user2.id</code>.
     */
    public final TableField<User2Record, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>test1.user2.address</code>.
     */
    public final TableField<User2Record, String> ADDRESS = createField(DSL.name("address"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>test1.user2.createtime</code>.
     */
    public final TableField<User2Record, Timestamp> CREATETIME = createField(DSL.name("createtime"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>test1.user2.isdeleted</code>.
     */
    public final TableField<User2Record, String> ISDELETED = createField(DSL.name("isdeleted"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>test1.user2.password</code>.
     */
    public final TableField<User2Record, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>test1.user2.sex</code>.
     */
    public final TableField<User2Record, String> SEX = createField(DSL.name("sex"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>test1.user2.userfullname</code>.
     */
    public final TableField<User2Record, String> USERFULLNAME = createField(DSL.name("userfullname"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>test1.user2.username</code>.
     */
    public final TableField<User2Record, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>test1.user2.country_id</code>.
     */
    public final TableField<User2Record, Integer> COUNTRY_ID = createField(DSL.name("country_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>test1.user2</code> table reference
     */
    public USER2() {
        this(DSL.name("user2"), null);
    }

    /**
     * Create an aliased <code>test1.user2</code> table reference
     */
    public USER2(String alias) {
        this(DSL.name(alias), USER2);
    }

    /**
     * Create an aliased <code>test1.user2</code> table reference
     */
    public USER2(Name alias) {
        this(alias, USER2);
    }

    private USER2(Name alias, Table<User2Record> aliased) {
        this(alias, aliased, null);
    }

    private USER2(Name alias, Table<User2Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> USER2(Table<O> child, ForeignKey<O, User2Record> key) {
        super(child, key, USER2);
    }

    @Override
    public Schema getSchema() {
        return Test1.TEST1;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER2_FK7PBUV6U730MARAX4LERUMGY4S, Indexes.USER2_PRIMARY);
    }

    @Override
    public UniqueKey<User2Record> getPrimaryKey() {
        return Keys.KEY_USER2_PRIMARY;
    }

    @Override
    public List<UniqueKey<User2Record>> getKeys() {
        return Arrays.<UniqueKey<User2Record>>asList(Keys.KEY_USER2_PRIMARY);
    }

    @Override
    public USER2 as(String alias) {
        return new USER2(DSL.name(alias), this);
    }

    @Override
    public USER2 as(Name alias) {
        return new USER2(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public USER2 rename(String name) {
        return new USER2(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public USER2 rename(Name name) {
        return new USER2(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, Timestamp, String, String, String, String, String, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
